{
  "version": 3,
  "sources": ["../../../../../../Users/juanalfaro/Projects/landing-artifices/netlify/functions/submit-lead.mjs"],
  "sourceRoot": "/var/folders/jt/7w81xsnn5j3dp8xw68v6x1kc0000gn/T/tmp-13375-yD7mBU1zL55E",
  "sourcesContent": ["// netlify/functions/submit-lead.mjs\nexport async function handler (event) {\n  /* 1 \u00B7 Solo POST */\n  if (event.httpMethod !== 'POST') {\n    return json({ error: 'Method Not Allowed' }, 405);\n  }\n\n  /* 2 \u00B7 Body esperado */\n  let data;\n  try { data = JSON.parse(event.body); }\n  catch { return json({ error: 'Bad JSON' }, 400); }\n\n  const { name = '', email = '', company = '', website = '', token } = data;\n  if (!email || !token) return json({ error: 'Missing fields' }, 422);\n\n  /* 3 \u00B7 Validar reCAPTCHA v3 */\n  const verify = await fetch('https://www.google.com/recaptcha/api/siteverify', {\n    method : 'POST',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    body   : new URLSearchParams({\n      secret  : process.env.RECAPTCHA_SECRET_KEY,\n      response: token\n    })\n  }).then(r => r.json());\n\n  if (!verify.success || verify.score < 0.5)\n    return json({ error: 'reCAPTCHA failed' }, 403);\n\n  /* 4 \u00B7 Round-robin en Upstash */\n  const agente = await nextAgent();        // \u2190 aqu\u00ED se decide qui\u00E9n sigue\n\n  /* 5 \u00B7 Crear / actualizar contacto en Brevo */\n  const brevoHeaders = {\n    'api-key'     : process.env.BREVO_API_KEY,\n    'Content-Type': 'application/json'\n  };\n\n  const attrs   = { NOMBRE: name, COMPANY_NAME: company, WEBSITE: website, AGENTE: agente };\n  const listIds = [ Number(process.env.BREVO_LIST_ID || 6) ];\n\n  let res = await fetch('https://api.brevo.com/v3/contacts', {\n    method : 'POST',\n    headers: brevoHeaders,\n    body   : JSON.stringify({ email, attributes: attrs, listIds, updateEnabled: false })\n  });\n\n  if (!res.ok) {\n    const err = await res.json().catch(() => ({}));\n    if (res.status === 400 && err.code === 'duplicate_parameter') {\n      res = await fetch(`https://api.brevo.com/v3/contacts/${encodeURIComponent(email)}`, {\n        method : 'PUT',\n        headers: brevoHeaders,\n        body   : JSON.stringify({ attributes: attrs, listIds })\n      });\n    }\n  }\n\n  if (!res.ok) return json({ error: 'Brevo error' }, 502);\n\n  /* 6 \u00B7 OK */\n  return json({ ok: true, agente });\n}\n\n/* ----------------- helpers ----------------- */\nfunction json (obj, status = 200) {\n  return {\n    statusCode: status,\n    headers   : {\n      'Content-Type'               : 'application/json',\n      'Access-Control-Allow-Origin': '*'\n    },\n    body: JSON.stringify(obj)\n  };\n}\n\n/* Rotaci\u00F3n circular con RPOPLPUSH */\nasync function nextAgent () {\n  const { UPSTASH_REDIS_REST_URL, UPSTASH_REDIS_REST_TOKEN, AGENT_LIST } = process.env;\n  const agents  = AGENT_LIST.split(',').map(a => a.trim()).filter(Boolean);\n  const headers = { Authorization: `Bearer ${UPSTASH_REDIS_REST_TOKEN}` };\n\n  // intentamos hacer el rpoplpush\n  const res  = await fetch(\n    `${UPSTASH_REDIS_REST_URL}/rpoplpush/agents/agents?_format=json`,\n    { headers }\n  ).then(r => r.json());\n\n  let agent = res.result;\n\n  // Si la key no existe o el valor no es v\u00E1lido, reseteamos todo\n  if (res.error || !agents.includes(agent)) {\n    // 1) Borramos la lista\n    await fetch(`${UPSTASH_REDIS_REST_URL}/del/agents`, { headers });\n    // 2) La sembramos de nuevo\n    await fetch(`${UPSTASH_REDIS_REST_URL}/rpush/agents/${agents.join('/')}`, { headers });\n    // 3) Devolvemos el primero\n    agent = agents[0];\n  }\n\n  return agent;\n}\n"],
  "mappings": "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",
  "names": []
}
