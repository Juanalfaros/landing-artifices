{
  "version": 3,
  "sources": ["../../../../../../Users/juanalfaro/Projects/landing-artifices/netlify/functions/submit-lead.mjs"],
  "sourceRoot": "/var/folders/jt/7w81xsnn5j3dp8xw68v6x1kc0000gn/T/tmp-13375-jqTJ5tF4MAN8",
  "sourcesContent": ["// netlify/functions/submit-lead.mjs\n/**\n *  Variables de entorno necesarias (Settings \u203A Environment):\n *  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n *  RECAPTCHA_SECRET_KEY   \u2013 6Lc\u2026     (v3 secret)\n *  BREVO_API_KEY          \u2013 xkeysib-\u2026\n *  BREVO_LIST_ID          \u2013 6         (num. de tu lista)\n *  UPSTASH_REDIS_REST_URL \u2013 https://\u2026 (deploy URL)\n *  UPSTASH_REDIS_REST_TOKEN\n *  AGENT_LIST             \u2013 \"juan,ana,rodrigo\" (orden inicial del round-robin)\n *  SKIP_RECAPTCHA         \u2013 1 (opcional, s\u00F3lo dev)\n */\n\nexport async function handler(event) {\n  /* 0 \u00B7 Pre-flight CORS -------------------------------------------------- */\n  if (event.httpMethod === 'OPTIONS') {\n    return {\n      statusCode: 204,\n      headers: {\n        'Access-Control-Allow-Origin' : '*',\n        'Access-Control-Allow-Methods': 'POST, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type'\n      }\n    };\n  }\n\n  /* 1 \u00B7 M\u00E9todo POST \u00FAnicamente ------------------------------------------- */\n  if (event.httpMethod !== 'POST') {\n    return json({ error: 'Method Not Allowed' }, 405);\n  }\n\n  /* 2 \u00B7 Body esperado ---------------------------------------------------- */\n  let data;\n  try {\n    data = JSON.parse(event.body);\n  } catch {\n    return json({ error: 'Bad JSON' }, 400);\n  }\n\n  const { name = '', email = '', company = '', website = '', token } = data;\n  if (!email || !token) return json({ error: 'Missing fields' }, 422);\n\n  /* 3 \u00B7 Validar reCAPTCHA v3 (o saltarlo en dev) ------------------------- */\n  if (!process.env.SKIP_RECAPTCHA) {\n    const verify = await fetch('https://www.google.com/recaptcha/api/siteverify', {\n      method : 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body   : new URLSearchParams({\n        secret  : process.env.RECAPTCHA_SECRET_KEY,\n        response: token\n      })\n    }).then(r => r.json());\n\n    if (!verify.success || verify.score < 0.5) {\n      return json({ error: 'reCAPTCHA failed' }, 403);\n    }\n  }\n\n  /* 4 \u00B7 Round-robin en Upstash ------------------------------------------ */\n  const agente = await nextAgent();\n\n  /* 5 \u00B7 Crear / actualizar contacto en Brevo ---------------------------- */\n  const brevoHeaders = {\n    'api-key'     : process.env.BREVO_API_KEY,\n    'Content-Type': 'application/json'\n  };\n\n  const attrs   = { NOMBRE: name, COMPANY_NAME: company, WEBSITE: website, AGENTE: agente };\n  const listIds = [ Number(process.env.BREVO_LIST_ID || 6) ];\n\n  // Intento de creaci\u00F3n\n  let brevoRes = await fetch('https://api.brevo.com/v3/contacts', {\n    method : 'POST',\n    headers: brevoHeaders,\n    body   : JSON.stringify({ email, attributes: attrs, listIds, updateEnabled: false })\n  });\n\n  // Si ya exist\u00EDa, hacemos PUT\n  if (!brevoRes.ok) {\n    const err = await brevoRes.json().catch(() => ({}));\n    if (brevoRes.status === 400 && err.code === 'duplicate_parameter') {\n      brevoRes = await fetch(\n        `https://api.brevo.com/v3/contacts/${encodeURIComponent(email)}`,\n        { method: 'PUT', headers: brevoHeaders, body: JSON.stringify({ attributes: attrs, listIds }) }\n      );\n    }\n  }\n\n  if (!brevoRes.ok) return json({ error: 'Brevo error' }, 502);\n\n  /* 6 \u00B7 \u00C9xito ------------------------------------------------------------ */\n  return json({ ok: true, agente });\n}\n\n/* ---------- Helpers ---------------------------------------------------- */\nfunction json(obj, status = 200) {\n  return {\n    statusCode: status,\n    headers   : {\n      'Content-Type'               : 'application/json',\n      'Access-Control-Allow-Origin': '*'\n    },\n    body: JSON.stringify(obj)\n  };\n}\n\n/**\n * Devuelve el siguiente agente con RPOPLPUSH.\n * Si el key no existe (primera vez) lo inicializa con AGENT_LIST.\n */\nasync function nextAgent() {\n  const { UPSTASH_REDIS_REST_URL, UPSTASH_REDIS_REST_TOKEN, AGENT_LIST } = process.env;\n  const agents = AGENT_LIST.split(',').map(a => a.trim()).filter(Boolean);\n  const headers = { Authorization: `Bearer ${UPSTASH_REDIS_REST_TOKEN}` };\n\n  // rpoplpush agents agents  \u2192  rota lista y devuelve el que sac\u00F3 al frente\n  const rotateURL = `${UPSTASH_REDIS_REST_URL}/rpoplpush/agents/agents`;\n  const res = await fetch(rotateURL, { headers }).then(r => r.json());\n\n  // Si a\u00FAn no existe la lista en Redis\n  if (res.error) {\n    const initURL = `${UPSTASH_REDIS_REST_URL}/rpush/agents/${agents.join('%20')}`;\n    await fetch(initURL, { headers });\n    return agents[0];\n  }\n\n  // rpoplpush devuelve string \u2713\n  return res.result || agents[0];\n}\n"],
  "mappings": "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",
  "names": []
}
